name: Deploy Enterprise Landing Zone Hub & Spoke Infrastructure
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
on:
  workflow_dispatch:
   inputs:
    DELETE_EXISTING_RESOURCES:
     description: 'Delete everything previously created first?'
     required: true
     type: boolean
     default: false

env:
  BICEP_ROOT_PATH: Scenarios/AKS-Secure-Baseline-PrivateCluster/Bicep/
  DEPLOYMENT_LOCATION: eastus
  HUB_RESOURCE_GROUP: ESLZ-HUB
  SPOKE_RESOURCE_GROUP: ESLZ-SPOKE
  MANAGED_RESOURCE_GROUP: eslzakscluster-aksInfraRG
  FIREWALL_NAME: AZFW
  CLUSTER_NAME: eslzakscluster
  LOG_ANALYTICS_WORKSPACE_NAME: eslzlaworkspace
  vmSize: Standard_D4d_v5
  RUNNER_VM_NAME: runner
  SPOKE_VNET_NAME: VNet-SPOKE
  AKS_SUBNET: AKS
  AKS_NSG: AKS-NSG
  AKS_ROUTE_TABLE: AKS-RT
  APP_GW_SUBNET: AppGWSubnet
  APP_GW_NSG: APPGW-NSG
  APP_GW_ROUTE_TABLE: AppGWSubnet-RT
  HUB_VNET_NAME: VNet-HUB
  SPOKE_SUBNET_NAME: servicespe
  AKS_SUBNET_CIDR: 10.1.1.0/24
  APP_GATEWAY_PIP_NAME: APPGW-PIP
  PRIVATE_DNS_NAME: constoso.internal

  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  VM_PW: ${{ secrets.VM_PW }}
  GH_TOKEN: ${{ secrets.RUNNER_CFG_PAT }}
  OWNER: ${{ github.repository_owner }}
  REPO: ${{ github.event.repository.name }} 
 
jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    name: 'Deploy Infrastructure'
    steps:
        
      - name: Azure Login
        uses: Azure/login@v1
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != ''}}
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Remove previous resources
        uses: Azure/CLI@v1
        if: ${{ inputs.DELETE_EXISTING_RESOURCES }}
        continue-on-error: true
        with:
          azcliversion: latest
          inlineScript: |
          
            az group delete -n ${{ env.HUB_RESOURCE_GROUP }} -y
            az group delete -n ${{ env.SPOKE_RESOURCE_GROUP }} -y
            az deployment sub delete -n ESLZ-HUB-AKS
            az deployment sub delete -n ESLZ-AKS-HUB-UDR
            az deployment sub delete -n ESLZ-HUB-VM
            az deployment sub delete -n ESLZ-HUB-RUNNER
            az deployment sub delete -n ESLZ-SPOKE-AKS
            az deployment sub delete -n ESLZ-SPOKE-AKS-SUPPORTING
            az deployment sub delete -n ESLZ-SPOKE-AKS-UDRNSG
            az deployment sub delete -n ESLZ-AKS-CLUSTER
            
      - name: Get ID of first self-hosted GH Runner on this repo
        if: ${{ inputs.DELETE_EXISTING_RESOURCES }}
        run: | 
        
          existingSelfHostedRunnerId="$(gh api --hostname github.com  /repos/$OWNER/$REPO/actions/runners --jq ".runners[0].id")"
          echo 'SelfHostedRunnerId='$existingSelfHostedRunnerId >> $GITHUB_ENV
          
      - name: Delete self-hosted GH Runner
        if: ${{ inputs.DELETE_EXISTING_RESOURCES && env.SelfHostedRunnerId != '' }}
        run: gh api --method "DELETE" --hostname "github.com"  /repos/$OWNER/$REPO/actions/runners/$SelfHostedRunnerId
    
      - name: Checkout IaC Templates
        uses: actions/checkout@main

      - name: Update Variables in IaC Templates
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |

            cd $GITHUB_WORKSPACE/Scenarios/AKS-Secure-Baseline-PrivateCluster/Bicep/03-Network-Hub/modules/VM
            find . -type f -exec sed -i 's/_OWNER_/${{ env.OWNER }}/g' {} +
            find . -type f -exec sed -i 's/_REPO_/${{ env.REPO }}/g' {} +
           
      - name: Create ESLZ Hub
        if: ${{ env.AZURE_SUBSCRIPTION_ID != '' }}
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ESLZ-HUB-AKS
          scope: subscription
          region: ${{ env.DEPLOYMENT_LOCATION }}
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.HUB_RESOURCE_GROUP }}
          template: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/main.bicep
          parameters: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/parameters-main.json
          failOnStdErr: false

      - name: Get CIDR of VM Subnet
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            VM_SUBNET_CIDR="$(az network vnet subnet show --resource-group ${{ env.HUB_RESOURCE_GROUP }} --name vmsubnet --vnet-name VNet-HUB --query addressPrefix --output tsv)"
            echo 'VM_SUBNET_CIDR='$VM_SUBNET_CIDR >> $GITHUB_ENV

      - name: Update Firewall to allow VMs out
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            az config set extension.use_dynamic_install=yes_without_prompt
          
            # Allow VM's out
            az network firewall network-rule create --collection-name 'runner-egress' --destination-ports '*' --dest-addr '*' --firewall-name ${{ env.FIREWALL_NAME }} --name 'Allow-Runner-Egress' --protocols Tcp --resource-group ${{ env.HUB_RESOURCE_GROUP }} --action Allow --source-addresses '${{ env.VM_SUBNET_CIDR }}' --priority 360
            
      - name: Create Jumpbox VM
        if: ${{ env.AZURE_SUBSCRIPTION_ID != '' && env.VM_PW != '' }}
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ESLZ-HUB-VM
          template: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/deploy-vm.bicep
          parameters: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/parameters-deploy-vm.json adminPassword=${{ env.VM_PW }}
          scope: subscription
          region: ${{ env.DEPLOYMENT_LOCATION }}
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.HUB_RESOURCE_GROUP }}
          failOnStdErr: false
            
      - name: Create GitHub Runner VM
        if: ${{ env.AZURE_SUBSCRIPTION_ID != '' && env.VM_PW != '' && env.VM_PW != '' &&  env.GH_TOKEN != '' }}
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ESLZ-HUB-RUNNER
          template: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/deploy-runner.bicep
          parameters: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/parameters-deploy-runner.json adminPassword=${{ env.VM_PW }} ghtoken=${{ env.GH_TOKEN }}
          scope: subscription
          region: ${{ env.DEPLOYMENT_LOCATION }}
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.HUB_RESOURCE_GROUP }}
          failOnStdErr: false

      - name: Create Random Name for Spoke KeyVault
        run: | 
        
            # KEYVAULT_NAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
            echo 'KEYVAULT_NAME=kv'$(uuidgen) | sed 's/-//g' | cut -c 1-38 >> $GITHUB_ENV

      - name: Create Random Name for Spoke Container Registry
        run: | 
        
            # ACR_NAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
            echo 'ACR_NAME=cr'$(uuidgen) | sed 's/-//g' | cut -c 1-33 >> $GITHUB_ENV
        
      - name: Create Random Name for Spoke Storage Account
        run: | 
        
            # STORAGE_ACCOUNT_NAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
            echo 'STORAGE_ACCOUNT_NAME=s'$(uuidgen) | sed 's/-//g' | cut -c 1-45 >> $GITHUB_ENV

      - name: Create User Defined Route
        if: ${{ env.AZURE_SUBSCRIPTION_ID != '' }}
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ESLZ-AKS-HUB-UDR
          template: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/updateUDR.bicep
          parameters: ${{ env.BICEP_ROOT_PATH }}03-Network-Hub/parameters-updateUDR.json
          scope: subscription
          region: ${{ env.DEPLOYMENT_LOCATION }}
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.HUB_RESOURCE_GROUP }}
          failOnStdErr: false

      - name: Create Spoke
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ESLZ-SPOKE-AKS
          template: ${{ env.BICEP_ROOT_PATH }}04-Network-LZ/main.bicep
          parameters: ${{ env.BICEP_ROOT_PATH }}04-Network-LZ/parameters-main.json
          scope: subscription
          region: ${{ env.DEPLOYMENT_LOCATION }}
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.SPOKE_RESOURCE_GROUP }}
          failOnStdErr: false            
            
      - name: Create AKS Supporting Resources in Spoke
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ESLZ-SPOKE-AKS-SUPPORTING
          template: ${{ env.BICEP_ROOT_PATH }}05-AKS-supporting/main.bicep
          parameters: ${{ env.BICEP_ROOT_PATH }}05-AKS-supporting/parameters-main.json acrName=${{ env.ACR_NAME }} keyvaultName=${{ env.KEYVAULT_NAME }} storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }}
          scope: subscription
          region: ${{ env.DEPLOYMENT_LOCATION }}
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.SPOKE_RESOURCE_GROUP }}
          failOnStdErr: false            

      - name: Set Environment Variables
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID="$(az resource list -n ${{ env.RUNNER_VM_NAME }} --query [*].identity.principalId --out tsv)"
            echo 'RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID='$RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID >> $GITHUB_ENV
          
            AKS_VERSION='1.26'
            echo 'AKS_VERSION='$AKS_VERSION >> $GITHUB_ENV 

      - name: Azure Log out
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != ''}}
        uses: azure/CLI@v1
        with:
          inlineScript: |
          
            az logout

      - name: Azure Login
        uses: Azure/login@v1
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != ''}}
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Configure AKS Subnet
        uses: azure/CLI@v1
        with:
          inlineScript: |

             az network vnet subnet update --vnet-name ${{ env.SPOKE_VNET_NAME }} --name ${{ env.AKS_SUBNET }} --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --route-table ${{ env.AKS_ROUTE_TABLE }} --network-security-group ${{ env.AKS_NSG }}

      - name: Configure Application Gateway Subnet
        uses: nick-fields/retry@v2
        with:
           timeout_seconds: 300
           max_attempts: 5
           retry_on: error
           command: |

             az network vnet subnet update --vnet-name ${{ env.SPOKE_VNET_NAME }} --name ${{ env.APP_GW_SUBNET }} --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --route-table ${{ env.APP_GW_ROUTE_TABLE }} --network-security-group ${{ env.APP_GW_NSG }}

      - name: Deploy AKS in Spoke
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ESLZ-AKS-CLUSTER
          template: ${{ env.BICEP_ROOT_PATH }}06-AKS-cluster/main.bicep
          parameters: ${{ env.BICEP_ROOT_PATH }}06-AKS-cluster/parameters-main.json clusterName=${{ env.CLUSTER_NAME }} acrName=${{ env.ACR_NAME }} keyvaultName=${{ env.KEYVAULT_NAME }} kubernetesVersion=${{ env.AKS_VERSION }} networkPlugin=azure aksuseraccessprincipalId=${{ env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID }} aksadminaccessprincipalId=${{ env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID }} akslaWorkspaceName=${{ env.LOG_ANALYTICS_WORKSPACE_NAME }}
          scope: subscription
          region: ${{ env.DEPLOYMENT_LOCATION }}
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.SPOKE_RESOURCE_GROUP }}
          failOnStdErr: false            

      - name: Set AKS Environment Variables
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            azureKeyvaultSecretsProviderUserAssignedManagedIdentityClientId="$(az aks addon show --name ${{ env.CLUSTER_NAME }} --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} -a azure-keyvault-secrets-provider --query identity.clientId -o tsv)"
            echo 'azureKeyvaultSecretsProviderUserAssignedManagedIdentityClientId='$azureKeyvaultSecretsProviderUserAssignedManagedIdentityClientId >> $GITHUB_ENV
            
            AKS_ID="$(az aks list --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --query [0].id -o tsv)"
            echo 'AKS_ID='$AKS_ID >> $GITHUB_ENV
            
            AKS_IDENTITY_ID="$(az identity list --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --query [0].clientId -o tsv)"
            echo 'AKS_IDENTITY_ID='$AKS_IDENTITY_ID >> $GITHUB_ENV
            
            APPGW_PIP="$(az network public-ip show --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --name ${{ env.APP_GATEWAY_PIP_NAME }} --query '{address: ipAddress}' -o tsv)"
            echo 'APPGW_PIP='$APPGW_PIP >> $GITHUB_ENV
            
            SUBNET_ID=$(az network vnet subnet show --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --vnet-name ${{ env.SPOKE_VNET_NAME }} --name ${{ env.SPOKE_SUBNET_NAME }} --query id --output tsv)
            echo 'SUBNET_ID='$SUBNET_ID >> $GITHUB_ENV
            
      - name: Enable AKS Auto-Upgrade
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            az aks update --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --auto-upgrade-channel stable
      
      - name: Assign Permissions to GitHub Runner VM's Managed identity
        uses: Azure/CLI@v1
        if: ${{ env.AKS_ID != '' && env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID != '' && env.AZURE_SUBSCRIPTION_ID != '' }}
        with:
          azcliversion: latest
          inlineScript: |
          
            # Assign Permissions to Github Self-Hosted Runner VM
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID }} --role 'Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.SPOKE_RESOURCE_GROUP }}'
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID }} --role "Azure Kubernetes Service RBAC Cluster Admin" --scope ${{ env.AKS_ID }}
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID }} --role 'Private DNS Zone Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.HUB_RESOURCE_GROUP }}'
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID }} --role 'Network Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.MANAGED_RESOURCE_GROUP }}'
            
            # Grant VM's user-created Managed Identity to AKS managed Resource Group
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.AKS_IDENTITY_ID }} --role 'Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.MANAGED_RESOURCE_GROUP }}'
            
            # Create Access Policy on KeyVault to allow GitHub Self-hosted Runner VMs system-assigned managed identity to set secrets
            az keyvault set-policy --name ${{ env.KEYVAULT_NAME }} --object-id ${{ env.RUNNER_MANAGED_IDENTITY_PRINCIPAL_ID }} --secret-permissions set --resource-group ${{ env.SPOKE_RESOURCE_GROUP }}

      - name: Create Custom DNS
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            # Create DNS Zone
            az network private-dns zone create --resource-group ${{ env.HUB_RESOURCE_GROUP }} --name ${{ env.PRIVATE_DNS_NAME }}
            
            # Link DNS Zone to Hub VNET
            az network private-dns link vnet create --resource-group ${{ env.HUB_RESOURCE_GROUP }} --name ${{ env.PRIVATE_DNS_NAME }}-link-hub --zone ${{ env.PRIVATE_DNS_NAME }} --virtual-network ${{ env.HUB_VNET_NAME }} --registration-enabled true
            
      - name: Update Firewall to allow AKS out
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            # Allow AKS to call the front-end of our Application Gateway (for LetsEncrypt)
            az network firewall network-rule create --collection-name 'aks-egress-to-application-gateway' --destination-ports '*' --firewall-name ${{ env.FIREWALL_NAME }} --name 'Allow-AppGW' --protocols Tcp --resource-group ${{ env.HUB_RESOURCE_GROUP }} --action Allow --dest-addr '${{ env.APPGW_PIP }}' --source-addresses '${{ env.AKS_SUBNET_CIDR }}' --destination-ports '*' --priority 350
            
            # Allow AKS to get NGINX - need to allow out all HTTPS outbound to get the images: https://github.com/kubernetes/registry.k8s.io#stability
            az network firewall application-rule create --collection-name 'aks-egress' --name 'Allow-HTTPS' --target-fqdns '*' --firewall-name ${{ env.FIREWALL_NAME }} --protocols Https=443 --resource-group ${{ env.HUB_RESOURCE_GROUP }} --source-addresses '${{ env.AKS_SUBNET_CIDR }}'  --priority 350 --action Allow
            
      - name: Cap Log Analytics Workspace Ingress to save $
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            az monitor log-analytics workspace update --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --workspace-name ${{ env.LOG_ANALYTICS_WORKSPACE_NAME }} --quota 5

      - name: Enable Auto-Scaler on Default Node Pool to save $
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            az aks nodepool update --resource-group ${{ env.SPOKE_RESOURCE_GROUP }} --name defaultpool --cluster-name ${{ env.CLUSTER_NAME }} --enable-cluster-autoscaler --min-count 2 --max-count 5

      - name: Log out
        uses: azure/CLI@v1
        with:
          inlineScript: |
          
            # Log out as per best practices for self-hosted runners (https://github.com/Azure/login#az-logout-and-security-hardening)          
            az logout
            az cache purge
            az account clear
