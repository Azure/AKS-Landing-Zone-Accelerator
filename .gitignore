# Local .terraform directories
**/.terraform/*
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib
.vs/

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Local .terraform directories
**/.terraform/*
.terraform
**.tfbackend**

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*
*.tfvars
*.hcl
*.vs

!.vscode/cspell.json #workspace spelling should be source controlled

# Ignore any .tfvars files that are generated automatically for each Terraform run
**/*.tfvars
**/*.tfvars.json

*tfplan.json
**/tfplan.json
*tfplan
**/tfplan

**/.terraform
**/*.tfstate
**/*.tfplan
.DS_Store
**/terraform.tfstate.d
**/terraform.tfstate.backup
**/.terraform.tfstate.lock.info
**/*.lock.hcl

.infracost/*
**/.infracost/*

